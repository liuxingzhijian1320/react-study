1. state 数据
2. JSx 模版
3. 数据 + 模版 结合，生成真实的DOM来显示
4. state 发生改变
5. 数据 + 模版结合，生成真实的DOM，替换原来的DOM

缺陷：
第一次生成了一个完整的DOM片段
第二次生成了一个完整的DOM片段
第二次的DOM替换第一次的DOM，非常耗性能

1. state 数据
2. JSx 模版
3. 数据 + 模版 结合，生成真实的DOM来显示
4. state 发生改变
5. 数据 + 模版结合，生成真实的DOM，并不是直接替换原始的DOM
6. 新的Dom和原始的DOM做对比，找差异
7. 找出input发生变化
8. 只用新的DOM中的input元素，替换掉老的DOM中的input元素

缺陷：
性能提升并不明显 

1. state 数据
2. JSx 模版
3. 数据 + 模版n生成虚拟DOM（虚拟DOM就是一个JS对象，用它 来描述真实DOM）
4. 用虚拟的DOM，生成真实的DOM，来显示
<div id="abc"><span>hello world</span></div> 真实
['div',{id:'abc',['span',{},'hello world']}] 虚拟
5. state发生了变化
6. 数据 + 模版 生成新的虚拟DOM（性能的提升课性能）
['div',{id:'abc',['span',{},'bye bye']}] 虚拟
7. 比较原始虚拟DOm和新的虚拟DOM的区别
8. 直接操作DOm，改变原始span中的内容

优点：
1. 性能提升le
2. 跨端应用得以提升，RN